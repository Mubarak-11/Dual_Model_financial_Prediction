name: Build & Deploy — paysim-api (ACA)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      RG: Fraud_detection
      ACR: containerregfrauddetect
      APP: paysim-api
      ACA_ENV: env-paysim-api
      IMAGE_REPO: paysim-api
      TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Container Apps CLI ready
        shell: bash
        run: |
          set -euo pipefail
          az extension add --name containerapp --upgrade
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.OperationalInsights --wait

      # Build with Docker on the runner (NOT ACR Tasks), then push to ACR
      - name: Build & push image with Docker
        shell: bash
        run: |
          set -euo pipefail

          REG=$(az acr show -n "$ACR" -g "$RG" --query loginServer -o tsv)
          IMAGE_SHA="$REG/$IMAGE_REPO:$TAG"
          IMAGE_LATEST="$REG/$IMAGE_REPO:latest"

          echo "== Login Docker to ACR via az =="
          az acr login -n "$ACR"

          echo "== Build image locally on runner =="
          docker build -t "$IMAGE_SHA" -t "$IMAGE_LATEST" .

          echo "== Push both tags to ACR =="
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"

          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV
          echo "REG=$REG" >> $GITHUB_ENV

      - name: Create/Update Container App
        id: deploy
        shell: bash
        run: |
          set -euo pipefail
          # Create if missing
          if az containerapp show -g "$RG" -n "$APP" >/dev/null 2>&1; then
            echo "Updating existing app image…"
            az containerapp update -g "$RG" -n "$APP" --image "$IMAGE_SHA"
          else
            echo "Creating app…"
            az containerapp create -g "$RG" -n "$APP" --environment "$ACA_ENV" --image "$IMAGE_SHA"
          fi

          echo "== Attach registry (compat subcommand) =="
          # If admin user is disabled, this still works since the app uses managed pull via az session;
          # if you want explicit creds, uncomment the next 3 lines:
          # USER=$(az acr credential show -n "$ACR" -g "$RG" --query username -o tsv)
          # PASS=$(az acr credential show -n "$ACR" -g "$RG" --query "passwords[0].value" -o tsv)
          # az containerapp registry set -g "$RG" -n "$APP" --server "$REG" --username "$USER" --password "$PASS"
          az containerapp registry set -g "$RG" -n "$APP" --server "$REG" || true

          echo "== Public ingress on 8000 (compat subcommand) =="
          az containerapp ingress set -g "$RG" -n "$APP" --type external --target-port 8000

          echo "== Size & scale (adjust as needed) =="
          az containerapp update -g "$RG" -n "$APP" --cpu 0.5 --memory 1Gi --min-replicas 1 --max-replicas 2

          echo "== App env vars (model paths) =="
          az containerapp update -g "$RG" -n "$APP" \
            --set-env-vars \
              MODEL_CKPT_CLS="/models/model_cls.pt" \
              MODEL_CKPT_REG="/models/model_reg.pt" \
              PREPROC_CLS="/models/preprocessor_cls.pkl" \
              PREPROC_REG="/models/preprocessor_reg.pkl" \
              MODEL_VER_CLS="v1" \
              MODEL_VER_REG="v1"

          echo "== Output URL =="
          FQDN=$(az containerapp show -g "$RG" -n "$APP" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> "$GITHUB_OUTPUT"
          echo "Public URL: https://$FQDN"

      - name: Print public URL
        run: echo "https://${{ steps.deploy.outputs.fqdn }}"
