name: Build & Deploy Paysim API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      # Non-sensitive values: set them here plainly
      RESOURCE_GROUP: Fraud_detection          # <- keep your existing RG (underscores are OK for RGs)
      APP_NAME: paysim-api                     # <- ensure only letters/numbers/hyphens
      REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/paysim-api:latest
            ${{ env.REGISTRY }}/paysim-api:${{ github.sha }}

      - name: Ensure Container Apps Env
        run: |
          set -e
          RG="${RESOURCE_GROUP}"
          APP="${APP_NAME}"

          # Sanitize for resources that require strict names (letters/numbers/hyphens)
          SAFE_APP=$(echo "$APP" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/^-//;s/-$//')
          WS="law-$SAFE_APP"
          ENV="env-$SAFE_APP"

          # Create Log Analytics workspace if missing
          if ! az monitor log-analytics workspace show -g "$RG" -n "$WS" &>/dev/null; then
            az monitor log-analytics workspace create -g "$RG" -n "$WS"
          fi
          LAW_ID=$(az monitor log-analytics workspace show -g "$RG" -n "$WS" --query customerId -o tsv)
          LAW_KEY=$(az monitor log-analytics workspace get-shared-keys -g "$RG" -n "$WS" --query primarySharedKey -o tsv)

          # Create Container Apps env if missing
          if ! az containerapp env show -g "$RG" -n "$ENV" &>/dev/null; then
            az containerapp env create -g "$RG" -n "$ENV" \
              --logs-workspace-id "$LAW_ID" --logs-workspace-key "$LAW_KEY"
          fi

          echo "ENV_NAME=$ENV" >> $GITHUB_ENV

      - name: Create/Update Container App
        id: deploy
        run: |
          set -e
          RG="${RESOURCE_GROUP}"
          APP="${APP_NAME}"
          ENV="${ENV_NAME}"
          IMAGE="${REGISTRY}/paysim-api:latest"

          if az containerapp show -g "$RG" -n "$APP" &>/dev/null; then
            az containerapp update \
              -g "$RG" -n "$APP" \
              --image "$IMAGE" \
              --registry-server "$REGISTRY" \
              --target-port 8000 \
              --ingress external \
              --min-replicas 0 --max-replicas 1 \
              --cpu 0.25 --memory 0.5Gi >/dev/null
          else
            az containerapp create \
              -g "$RG" -n "$APP" \
              --environment "$ENV" \
              --image "$IMAGE" \
              --registry-server "$REGISTRY" \
              --target-port 8000 \
              --ingress external \
              --min-replicas 0 --max-replicas 1 \
              --cpu 0.25 --memory 0.5Gi >/dev/null
          fi

          FQDN=$(az containerapp show -g "$RG" -n "$APP" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "FQDN=$FQDN" >> $GITHUB_OUTPUT

      - name: Show public URL
        run: echo "https://${{ steps.deploy.outputs.FQDN }}"
