name: Build & Deploy — paysim-api (ACA)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      RG: Fraud_detection
      ACR: containerregfrauddetect
      APP: paysim-api
      ACA_ENV: env-paysim-api
      IMAGE_REPO: paysim-api
      TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          # Option A: single JSON secret (recommended; you likely already have this)
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # Option B: OIDC (uncomment if you use federated creds)
          # client-id: ${{ secrets.AZURE_CLIENT_ID }}
          # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps (robust)
        id: deploy
        shell: bash
        run: |
          set -euo pipefail

          echo "== Ensure Container Apps CLI is ready =="
          az extension add --name containerapp --upgrade
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.OperationalInsights --wait

          echo "== Resolve ACR info =="
          REG=$(az acr show -n "$ACR" -g "$RG" --query loginServer -o tsv)
          USER=$(az acr credential show -n "$ACR" -g "$RG" --query username -o tsv)
          PASS=$(az acr credential show -n "$ACR" -g "$RG" --query "passwords[0].value" -o tsv)
          IMAGE_SHA="$REG/$IMAGE_REPO:$TAG"
          IMAGE_LATEST="$REG/$IMAGE_REPO:latest"
          echo "Image (sha): $IMAGE_SHA"
          echo "Image (latest): $IMAGE_LATEST"

          echo "== Build image in ACR =="
          az acr build -r "$ACR" \
            -t "$IMAGE_REPO:$TAG" \
            -t "$IMAGE_REPO:latest" \
            .

          echo "== Create or Update Container App =="
          if az containerapp show -g "$RG" -n "$APP" >/dev/null 2>&1; then
            echo "Updating existing app image…"
            az containerapp update -g "$RG" -n "$APP" --image "$IMAGE_SHA"
          else
            echo "Creating new app…"
            az containerapp create \
              -g "$RG" \
              -n "$APP" \
              --environment "$ACA_ENV" \
              --image "$IMAGE_SHA"
          fi

          echo "== Attach ACR registry creds (compat subcommand) =="
          az containerapp registry set \
            -g "$RG" -n "$APP" \
            --server "$REG" \
            --username "$USER" \
            --password "$PASS"

          echo "== Public ingress on port 8000 (compat subcommand) =="
          az containerapp ingress set \
            -g "$RG" -n "$APP" \
            --type external --target-port 8000

          echo "== Sizing & scale (tweak as needed) =="
          az containerapp update -g "$RG" -n "$APP" \
            --cpu 0.5 --memory 1Gi \
            --min-replicas 1 --max-replicas 2

          echo "== App env vars for model paths (safe to run repeatedly) =="
          az containerapp update -g "$RG" -n "$APP" \
            --set-env-vars \
              MODEL_CKPT_CLS="/models/model_cls.pt" \
              MODEL_CKPT_REG="/models/model_reg.pt" \
              PREPROC_CLS="/models/preprocessor_cls.pkl" \
              PREPROC_REG="/models/preprocessor_reg.pkl" \
              MODEL_VER_CLS="v1" \
              MODEL_VER_REG="v1"

          echo "== Show URL =="
          FQDN=$(az containerapp show -g "$RG" -n "$APP" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> "$GITHUB_OUTPUT"
          echo "Public URL: https://$FQDN"

      - name: Print public URL
        run: echo "https://${{ steps.deploy.outputs.fqdn }}"
