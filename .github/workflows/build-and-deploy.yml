name: Build & Deploy Paysim API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    # === Non-secret config ===
    env:
      RESOURCE_GROUP: Fraud_detection                 # Your RG
      APP_NAME: paysim-api                            # Container App name
      REGISTRY: containerregfrauddetect.azurecr.io    # ACR login server (no https://)
      LOCATION: canadacentral                         # Azure region for the env

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Sanity check your registry value
      - name: Verify REGISTRY env
        run: |
          echo "REGISTRY=$REGISTRY"
          if [ -z "$REGISTRY" ]; then
            echo "ERROR: REGISTRY env is empty"; exit 1
          fi
          case "$REGISTRY" in
            http*|*/*) echo "ERROR: REGISTRY must be just the hostname (e.g. containerregfrauddetect.azurecr.io)"; exit 1 ;;
          esac

      # Login to ACR for docker push using admin creds stored in repo secrets
      - name: Docker login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/paysim-api:latest
            ${{ env.REGISTRY }}/paysim-api:${{ github.sha }}

      # Make sure provider namespaces and extension are available
      - name: Ensure providers + containerapp extension
        run: |
          set -e
          for NS in Microsoft.App Microsoft.OperationalInsights; do
            az provider register --namespace $NS || true
            for i in {1..20}; do
              STATE=$(az provider show --namespace $NS --query registrationState -o tsv || echo "Unknown")
              echo "$NS: $STATE"
              [ "$STATE" = "Registered" ] && break
              sleep 10
            done
            [ "$STATE" = "Registered" ] || { echo "ERROR: $NS not registered"; exit 1; }
          done

          # Ensure the containerapp CLI extension exists
          az extension add --name containerapp --upgrade -y || az extension update --name containerapp -y

      - name: Ensure Container Apps environment (creates LA workspace if missing)
        run: |
          set -e
          RG="${RESOURCE_GROUP}"
          LOC="${LOCATION}"
          APP="${APP_NAME}"

          # Names for workspace/env (safe chars)
          SAFE_APP=$(echo "$APP" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/^-//;s/-$//')
          WS="law-$SAFE_APP"
          ENV="env-$SAFE_APP"

          # Create Log Analytics workspace if missing
          if ! az monitor log-analytics workspace show -g "$RG" -n "$WS" &>/dev/null; then
            az monitor log-analytics workspace create -g "$RG" -n "$WS" -l "$LOC"
          fi
          LAW_ID=$(az monitor log-analytics workspace show -g "$RG" -n "$WS" --query customerId -o tsv)
          LAW_KEY=$(az monitor log-analytics workspace get-shared-keys -g "$RG" -n "$WS" --query primarySharedKey -o tsv)

          # Create Container Apps env if missing
          if ! az containerapp env show -g "$RG" -n "$ENV" &>/dev/null; then
            az containerapp env create \
              -g "$RG" -n "$ENV" -l "$LOC" \
              --logs-workspace-id "$LAW_ID" \
              --logs-workspace-key "$LAW_KEY"
          fi

          echo "ENV_NAME=$ENV" >> $GITHUB_ENV

      - name: Create or Update Container App
        id: deploy
        run: |
          set -e
          RG="${RESOURCE_GROUP}"
          APP="${APP_NAME}"
          ENV="${ENV_NAME}"
          REG="${REGISTRY}"
          IMAGE="${REG}/paysim-api:latest"
          USER="${{ secrets.ACR_USERNAME }}"
          PASS="${{ secrets.ACR_PASSWORD }}"

          # Create if missing, otherwise update
          if az containerapp show -g "$RG" -n "$APP" &>/dev/null; then
            az containerapp update \
              -g "$RG" -n "$APP" \
              --image "$IMAGE" \
              --registry-server "$REG" \
              --registry-username "$USER" \
              --registry-password "$PASS" \
              --target-port 8000 \
              --ingress external \
              --min-replicas 0 --max-replicas 1 \
              --cpu 0.25 --memory 0.5Gi >/dev/null
          else
            az containerapp create \
              -g "$RG" -n "$APP" \
              --environment "$ENV" \
              --image "$IMAGE" \
              --registry-server "$REG" \
              --registry-username "$USER" \
              --registry-password "$PASS" \
              --target-port 8000 \
              --ingress external \
              --min-replicas 0 --max-replicas 1 \
              --cpu 0.25 --memory 0.5Gi >/dev/null
          fi

          FQDN=$(az containerapp show -g "$RG" -n "$APP" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "FQDN=$FQDN" >> $GITHUB_OUTPUT

      - name: Show public URL
        run: echo "https://${{ steps.deploy.outputs.FQDN }}"
